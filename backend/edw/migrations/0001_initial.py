# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2017-05-05 13:20
from __future__ import unicode_literals

import bitfield.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import edw.models.data_mart
import edw.models.entity
import edw.models.fields
import edw.models.mixins.entity.add_date_terms_validation
import edw.models.mixins.entity.fsm
import edw.models.mixins.entity.notification
import edw.models.mixins.term.semantic_rule
import edw.signals.mptt
import email_auth.models
import filer.fields.file
import filer.fields.image
import geoposition.fields
import jsonfield.fields
import page_builder.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('post_office', '0010_auto_20160820_0052'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('email_auth', '0002_auto_20160327_1119'),
        ('filer', '0006_auto_20160623_1627'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdditionalEntityCharacteristicOrMark',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=255, verbose_name='Value')),
                ('view_class', models.CharField(blank=True, help_text='Space delimited class attribute, specifies one or more classnames for an entity.', max_length=255, null=True, verbose_name='View Class')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Additional Entity Characteristic or Mark',
                'verbose_name_plural': 'Additional Entity Characteristics or Marks',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('recognized', models.PositiveSmallIntegerField(choices=[(0, 'Unrecognized'), (1, 'Guest'), (2, 'Registered')], default=0, help_text='Designates the state the customer is recognized as.', verbose_name='Recognized as')),
                ('salutation', models.CharField(choices=[('mrs', 'Mrs.'), ('mr', 'Mr.'), ('na', '(n/a)')], max_length=5, verbose_name='Salutation')),
                ('last_access', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Last accessed')),
                ('extra', jsonfield.fields.JSONField(default={}, editable=False, verbose_name='Extra information about this customer')),
                ('number', models.PositiveIntegerField(default=None, null=True, unique=True, verbose_name='Customer Number')),
            ],
        ),
        migrations.CreateModel(
            name='DataMart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='Used for URLs, auto-generated from name if blank.', verbose_name='Slug')),
                ('path', models.CharField(db_index=True, editable=False, max_length=255, unique=True, verbose_name='Path')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('ordering', models.CharField(default='-created_at', help_text='Default data mart entities ordering mode.', max_length=50, verbose_name='Ordering')),
                ('view_component', models.CharField(default='list', help_text='Default data mart entities view component.', max_length=50, verbose_name='View component')),
                ('limit', models.IntegerField(blank=True, help_text='\u041e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. \u041e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u043f\u0443\u0441\u0442\u044b\u043c \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e (\u043f\u043e-\u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 12).', null=True, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Limit')),
                ('view_class', models.CharField(blank=True, help_text='Space delimited class attribute, specifies one or more classnames for an data mart.', max_length=255, null=True, verbose_name='View Class')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('active', models.BooleanField(db_index=True, default=True, help_text='Is this data mart active.', verbose_name='Active')),
                ('system_flags', bitfield.models.BitField([('delete_restriction', 'Delete restriction'), ('change_parent_restriction', 'Change parent restriction'), ('change_slug_restriction', 'Change slug restriction'), ('has_child_restriction', 'Has child restriction'), ('change_terms_restriction', 'Change terms restriction')], default=None, null=True, verbose_name='system flags')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Data mart',
                'verbose_name_plural': 'Data marts',
            },
            bases=(edw.models.data_mart.ApiReferenceMixin, edw.signals.mptt.MPTTModelSignalSenderMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DataMartImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.SmallIntegerField(default=0)),
                ('data_mart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edw.DataMart', verbose_name='DataMart')),
                ('image', filer.fields.image.FilerImageField(on_delete=django.db.models.deletion.CASCADE, to='filer.Image', verbose_name='Image')),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'DataMart Image',
                'verbose_name_plural': 'DataMart Images',
            },
        ),
        migrations.CreateModel(
            name='DataMartRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction', models.CharField(choices=[('b', 'Bidirectional'), ('f', 'Forward'), ('r', 'Reverse')], default='b', help_text='Defines the direction of relation on which selection is carried out', max_length=1, verbose_name='Relation direction')),
                ('data_mart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relations', to='edw.DataMart', verbose_name='Data mart')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Data mart relation',
                'verbose_name_plural': 'Data mart relations',
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('active', models.BooleanField(default=True, help_text='Is this object publicly visible.', verbose_name='Active')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
            },
            bases=(edw.models.mixins.entity.add_date_terms_validation.AddedDateTermsValidationMixin, edw.models.entity.ApiReferenceMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EntityImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.SmallIntegerField(default=0)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
                'verbose_name': 'Entity Image',
                'verbose_name_plural': 'Entity Images',
            },
        ),
        migrations.CreateModel(
            name='EntityRelatedDataMart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_mart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='edw.DataMart', verbose_name='Data mart')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Related data mart',
                'verbose_name_plural': 'Entity related data marts',
            },
        ),
        migrations.CreateModel(
            name='EntityRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Entity Relation',
                'verbose_name_plural': 'Entity Relations',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_draft', models.BooleanField(default=True, verbose_name='Is draft')),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
            },
        ),
        migrations.CreateModel(
            name='MessageImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.SmallIntegerField(default=0)),
                ('image', filer.fields.image.FilerImageField(on_delete=django.db.models.deletion.CASCADE, related_name='message_images', to='filer.Image', verbose_name='Image')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edw.Message', verbose_name='Message')),
            ],
            options={
                'ordering': ('order',),
                'verbose_name': 'Message image',
                'verbose_name_plural': 'Message images',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('transition_target', models.CharField(max_length=50, verbose_name='Event')),
                ('mail_to', models.IntegerField(blank=True, default=None, null=True, verbose_name='Mail to')),
                ('mail_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='post_office.EmailTemplate', verbose_name='Template')),
            ],
            options={
                'ordering': ('transition_target', 'mail_to'),
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='NotificationAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment', filer.fields.file.FilerFileField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_attachment', to='filer.File', verbose_name='Attachment')),
                ('notification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edw.Notification')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
            },
        ),
        migrations.CreateModel(
            name='PostalZone',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('postal_codes', models.TextField(blank=True, help_text="You enter on one index in line. Use '?' and '*' as universal substitutes. '?' replaces any symbol, '*' replaces any sequence of symbols (including I am empty). Gaps are ignored. '_' replaces any quantity of gaps (but at least one). Example: 2204*, 38?45, 23*, 123_4??.", null=True, verbose_name='Postal codes')),
                ('active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
            ],
            options={
                'ordering': ('term__tree_id', 'term__lft'),
                'verbose_name': 'Postal zone',
                'verbose_name_plural': 'Postal zones',
            },
        ),
        migrations.CreateModel(
            name='PublicationTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('builder_template', page_builder.fields.BuilderTemplateField(max_length=255, null=True, verbose_name='Template builder')),
            ],
            options={
                'verbose_name': 'Publication template',
                'verbose_name_plural': 'Publication templates',
            },
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='Used for URLs, auto-generated from name if blank.', verbose_name='Slug')),
                ('path', models.CharField(db_index=True, editable=False, max_length=255, unique=True, verbose_name='Path')),
                ('semantic_rule', models.PositiveSmallIntegerField(choices=[(10, 'OR'), (20, 'XOR'), (30, 'AND')], default=10, verbose_name='Semantic Rule')),
                ('attributes', bitfield.models.BitField([('is_characteristic', 'Is characteristic'), ('is_mark', 'Is mark'), ('is_relation', 'Is relation')], default=None, help_text='Specifying attributes of term.', null=True, verbose_name='attributes')),
                ('specification_mode', models.PositiveSmallIntegerField(choices=[(10, 'Standard'), (20, 'Expanded'), (30, 'Reduced')], default=10, verbose_name='Specification Mode')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('view_class', models.CharField(blank=True, help_text='Space delimited class attribute, specifies one or more classnames for an entity.', max_length=255, null=True, verbose_name='View Class')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('active', models.BooleanField(db_index=True, default=True, help_text='Is this term active.', verbose_name='Active')),
                ('system_flags', bitfield.models.BitField([('delete_restriction', 'Delete restriction'), ('change_parent_restriction', 'Change parent restriction'), ('change_slug_restriction', 'Change slug restriction'), ('change_semantic_rule_restriction', 'Change semantic rule restriction'), ('has_child_restriction', 'Has child restriction'), ('external_tagging_restriction', 'External tagging restriction')], default=None, null=True, verbose_name='system flags')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', edw.models.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='edw.Term', verbose_name='Parent')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Term',
                'verbose_name_plural': 'Topic model',
            },
            bases=(edw.models.mixins.term.semantic_rule.AndRuleFilterMixin, edw.models.mixins.term.semantic_rule.OrRuleFilterMixin, edw.signals.mptt.MPTTModelSignalSenderMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CustomerProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Customer',
                'proxy': True,
                'verbose_name_plural': 'Customers',
            },
            bases=('email_auth.user',),
            managers=[
                ('objects', email_auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('post_office.email',),
        ),
        migrations.CreateModel(
            name='BasePerson',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.Entity')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Person',
                'verbose_name_plural': 'Persons',
            },
            bases=('edw.entity',),
        ),
        migrations.CreateModel(
            name='ParticularProblem',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.Entity')),
                ('stored_request', jsonfield.fields.JSONField(default={}, help_text='Parts of the Request objects on the moment of submit.')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('status', django_fsm.FSMField(default='draft', max_length=50, protected=True, verbose_name='Status')),
                ('solved_at', models.DateTimeField(blank=True, null=True, verbose_name='Solved at')),
            ],
            options={
                'verbose_name': 'Particular problem',
                'verbose_name_plural': 'Particular problems',
            },
            bases=(edw.models.mixins.entity.notification.NotificationMixin, edw.models.mixins.entity.fsm.FSMMixin, 'edw.entity'),
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.Entity')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('geoposition', geoposition.fields.GeopositionField(max_length=42, verbose_name='Geoposition')),
                ('postcode', models.CharField(blank=True, max_length=16, null=True, verbose_name='Postcode')),
            ],
            options={
                'verbose_name': 'Place',
                'verbose_name_plural': 'Places',
            },
            bases=('edw.entity',),
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.Entity')),
                ('name', models.CharField(max_length=255, verbose_name='Title')),
                ('lead', models.CharField(blank=True, max_length=600, null=True, verbose_name='Lead')),
                ('author', models.CharField(blank=True, max_length=255, null=True, verbose_name='Author')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edw.PublicationTemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Publication',
                'verbose_name_plural': 'Publications',
            },
            bases=('edw.entity',),
        ),
        migrations.CreateModel(
            name='TypicalProblem',
            fields=[
                ('entity_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.Entity')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('deadline', models.PositiveIntegerField(default=30, help_text='The deadline for reply (In days).', verbose_name='Deadline')),
                ('redline', models.PositiveIntegerField(default=25, help_text='The redline for reply (In days).', verbose_name='Redline')),
                ('is_image_required', models.BooleanField(default=True, help_text='Is image required on a particular problem', verbose_name='Is problem image required')),
            ],
            options={
                'verbose_name': 'Typical problem',
                'verbose_name_plural': 'Typical problems',
            },
            bases=('edw.entity',),
        ),
        migrations.AddField(
            model_name='postalzone',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='edw.Term', verbose_name='Term'),
        ),
        migrations.AddField(
            model_name='message',
            name='images',
            field=models.ManyToManyField(through='edw.MessageImage', to='filer.Image'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='from_entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forward_relations', to='edw.Entity', verbose_name='From Entity'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='edw.Term', verbose_name='Term'),
        ),
        migrations.AddField(
            model_name='entityrelation',
            name='to_entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backward_relations', to='edw.Entity', verbose_name='To Entity'),
        ),
        migrations.AddField(
            model_name='entityrelateddatamart',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='edw.Entity', verbose_name='Entity'),
        ),
        migrations.AddField(
            model_name='entityimage',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edw.Entity', verbose_name='Entity'),
        ),
        migrations.AddField(
            model_name='entityimage',
            name='image',
            field=filer.fields.image.FilerImageField(on_delete=django.db.models.deletion.CASCADE, to='filer.Image', verbose_name='Image'),
        ),
        migrations.AddField(
            model_name='entity',
            name='_relations',
            field=models.ManyToManyField(through='edw.EntityRelation', to='edw.Entity'),
        ),
        migrations.AddField(
            model_name='entity',
            name='additional_characteristics_or_marks',
            field=models.ManyToManyField(through='edw.AdditionalEntityCharacteristicOrMark', to='edw.Term'),
        ),
        migrations.AddField(
            model_name='entity',
            name='images',
            field=models.ManyToManyField(through='edw.EntityImage', to='filer.Image'),
        ),
        migrations.AddField(
            model_name='entity',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_edw.entity_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='entity',
            name='related_data_marts',
            field=models.ManyToManyField(blank=True, related_name='_entity_related_data_marts_+', through='edw.EntityRelatedDataMart', to='edw.DataMart', verbose_name='Related data marts'),
        ),
        migrations.AddField(
            model_name='entity',
            name='terms',
            field=models.ManyToManyField(blank=True, help_text='Use "ctrl" key for choose multiple terms', related_name='entities', to='edw.Term', verbose_name='Terms'),
        ),
        migrations.AddField(
            model_name='datamartrelation',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='edw.Term', verbose_name='Term'),
        ),
        migrations.AddField(
            model_name='datamart',
            name='_relations',
            field=models.ManyToManyField(through='edw.DataMartRelation', to='edw.Term'),
        ),
        migrations.AddField(
            model_name='datamart',
            name='images',
            field=models.ManyToManyField(through='edw.DataMartImage', to='filer.Image'),
        ),
        migrations.AddField(
            model_name='datamart',
            name='parent',
            field=edw.models.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='edw.DataMart', verbose_name='Parent'),
        ),
        migrations.AddField(
            model_name='datamart',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_edw.datamart_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='datamart',
            name='terms',
            field=models.ManyToManyField(blank=True, related_name='_datamart_terms_+', to='edw.Term', verbose_name='Terms'),
        ),
        migrations.AddField(
            model_name='additionalentitycharacteristicormark',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='edw.Entity', verbose_name='Entity'),
        ),
        migrations.AddField(
            model_name='additionalentitycharacteristicormark',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='edw.Term', verbose_name='Term'),
        ),
        migrations.CreateModel(
            name='ModeratePerson',
            fields=[
                ('baseperson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.BasePerson')),
            ],
            options={
                'verbose_name': 'Moderate person',
                'verbose_name_plural': 'Moderate persons',
            },
            bases=('edw.baseperson',),
        ),
        migrations.CreateModel(
            name='PrivatePerson',
            fields=[
                ('baseperson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.BasePerson')),
                ('rating', models.IntegerField(default=0, verbose_name='Rating')),
            ],
            options={
                'verbose_name': 'Private person',
                'verbose_name_plural': 'Private persons',
            },
            bases=('edw.baseperson',),
        ),
        migrations.CreateModel(
            name='ResponsiblePerson',
            fields=[
                ('baseperson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='edw.BasePerson')),
                ('post', models.CharField(blank=True, help_text='Responsible person post', max_length=255, null=True, verbose_name='Post')),
            ],
            options={
                'verbose_name': 'Responsible person',
                'verbose_name_plural': 'Responsible persons',
            },
            bases=('edw.baseperson',),
        ),
        migrations.AlterUniqueTogether(
            name='postalzone',
            unique_together=set([('term', 'active')]),
        ),
        migrations.AddField(
            model_name='message',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edw.BasePerson', verbose_name='Author'),
        ),
        migrations.AddField(
            model_name='message',
            name='problem',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='edw.ParticularProblem', verbose_name='Particular problem'),
        ),
        migrations.AlterUniqueTogether(
            name='entityrelation',
            unique_together=set([('term', 'from_entity', 'to_entity')]),
        ),
        migrations.AlterUniqueTogether(
            name='datamartrelation',
            unique_together=set([('data_mart', 'term')]),
        ),
        migrations.AddField(
            model_name='baseperson',
            name='customer',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='edw.Customer', verbose_name='Customer'),
        ),
    ]
